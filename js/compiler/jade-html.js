// Generated by CoffeeScript 1.9.3
var CompilationError, CompilationWarning, Jade;

CompilationError = require('../error/compilation-error');

CompilationWarning = require('../warning/compilation-warning');

Jade = require('jade');

require('../patch/jade-patch');

module.exports = function(inf, cb) {
  var cfg, desc, err, err_line, i, includes, j, len, len1, line, pos, ref, ref1, warning, warnings;
  if (inf.compiledJade != null) {
    inf.res.compiled = inf.compiledJade;
    return cb();
  }
  try {
    cfg = {
      compileDebug: false,
      pretty: true,
      _multic_includes: (includes = []),
      _multic_warnings: (warnings = [])
    };
    if (inf.options.file) {
      cfg.filename = inf.options.file;
    }
    if (Array.isArray(inf.sourceMap)) {
      cfg.nodes = inf.sourceMap;
    }
    if (inf.includeSources && typeof inf.includeSources === 'object') {
      cfg._multic_includeSources = inf.includeSources;
    }
    inf.res.compiled = Jade.render(inf.source, cfg);
  } catch (_error) {
    err = _error;
    desc = String(err).split('\n\n').slice(1).join('\n\n');
    ref = String(err).split('\n');
    for (i = 0, len = ref.length; i < len; i++) {
      err_line = ref[i];
      if (!(err_line.substr(0, 4) === '  > ')) {
        continue;
      }
      line = String(err_line.substr(4).split('|')[0]).trim();
      break;
    }
    pos = CompilationError.parsePos(line, null, -1);
    inf.res.errors.push(new CompilationError(inf, err, pos, desc));
  } finally {
    for (j = 0, len1 = warnings.length; j < len1; j++) {
      warning = warnings[j];
      inf.res.warnings.push(new CompilationWarning(inf, warning, warning.line));
    }
    (ref1 = inf.res.includes).push.apply(ref1, includes);
  }
  return cb();
};
