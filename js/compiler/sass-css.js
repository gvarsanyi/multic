// Generated by CoffeeScript 1.9.3
var CompilationError, NodeSass, fs, path;

CompilationError = require('../error/compilation-error');

NodeSass = require('node-sass');

fs = require('fs');

path = require('path');

module.exports = function(inf, cb) {
  var err, opts;
  if (inf.compiledSass != null) {
    inf.res.compiled = inf.compiledSass;
    return cb();
  }
  try {
    opts = {
      data: inf.source,
      includePaths: []
    };
    if (inf.options.file) {
      opts.file = inf.options.file;
      opts.includePaths.push(path.resolve(path.dirname(inf.options.file) + '/'));
    }
    return NodeSass.render(opts, function(err, res) {
      var fn, i, include, includes, len, loaded, pos, ref, ref1, ref2;
      if (err) {
        pos = CompilationError.parsePos(err.line, err.column, -1, -1);
        inf.res.errors.push(new CompilationError(inf, err, pos));
        return cb();
      }
      if ((ref = (includes = res != null ? (ref1 = res.stats) != null ? ref1.includedFiles : void 0 : void 0)) != null ? ref.length : void 0) {
        (ref2 = inf.res.includes).push.apply(ref2, includes);
      }
      inf.res.compiled = res.css.toString();
      if (!(inf.includeSources && typeof inf.includeSources === 'object' && (includes != null ? includes.length : void 0))) {
        return cb();
      }
      loaded = 0;
      fn = function(include) {
        return fs.readFile(include, {
          encoding: 'utf8'
        }, function(err, data) {
          if (typeof data === 'string' && !err) {
            inf.includeSources[include] = data;
          }
          loaded += 1;
          if (loaded >= includes.length) {
            return cb();
          }
        });
      };
      for (i = 0, len = includes.length; i < len; i++) {
        include = includes[i];
        fn(include);
      }
    });
  } catch (_error) {
    err = _error;
    inf.res.errors.push(new CompilationError(inf, err));
    return cb();
  }
};
