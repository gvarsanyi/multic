// Generated by CoffeeScript 1.9.3
var CompilationError, Less, fs, path;

CompilationError = require('../error/compilation-error');

Less = require('less');

fs = require('fs');

path = require('path');

module.exports = function(inf, cb) {
  var content_ready, opts;
  if (inf.compiledLess != null) {
    inf.res.compiled = inf.compiledLess;
    return cb();
  }
  opts = {
    paths: []
  };
  content_ready = function(file_content) {
    var err;
    try {
      return Less.render(inf.source || file_content, opts, function(err, res) {
        var fn, i, include, includes, len, loaded, pos, ref, ref1;
        if (err) {
          pos = CompilationError.parsePos(err.line, err.column, -1, -1);
          inf.res.errors.push(new CompilationError(inf, err, pos));
          return cb();
        }
        if ((ref = (includes = res.imports)) != null ? ref.length : void 0) {
          (ref1 = inf.res.includes).push.apply(ref1, includes);
        }
        inf.res.compiled = res.css;
        if (!(inf.includeSources && typeof inf.includeSources === 'object' && (includes != null ? includes.length : void 0))) {
          return cb();
        }
        loaded = 0;
        fn = function(include) {
          return fs.readFile(include, {
            encoding: 'utf8'
          }, function(err, data) {
            if (typeof data === 'string' && !err) {
              inf.includeSources[include] = data;
            }
            loaded += 1;
            if (loaded >= includes.length) {
              return cb();
            }
          });
        };
        for (i = 0, len = includes.length; i < len; i++) {
          include = includes[i];
          fn(include);
        }
      });
    } catch (_error) {
      err = _error;
      inf.res.errors.push(new CompilationError(inf, err));
      return cb();
    }
  };
  if (inf.options.file) {
    opts.filename = inf.options.file;
    opts.paths.push(path.resolve(path.dirname(inf.options.file) + '/'));
  }
  if (inf.options.file && !inf.source) {
    return fs.readFile(inf.options.file, {
      encoding: 'utf8'
    }, function(err, data) {
      if (err) {
        inf.res.errors.push(new CompilationError(inf, err));
        cb();
      }
      return content_ready(data);
    });
  } else {
    return content_ready();
  }
};
