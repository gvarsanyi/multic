// Generated by CoffeeScript 1.9.1
var LintError, LintWarning, levels;

LintError = require('../../error/lint-error');

LintWarning = require('../../warning/lint-warning');

levels = {
  errors: 'error',
  mandatory_warnings: 'warn',
  enabled_warnings: 'warn',
  disabled_warnings: 'warn',
  disabled_rules: 'ignore'
};

module.exports = function(inf, source_type, cb, next) {
  var base, base1, base2, cfg, factories, i, idea, item, keys, len, level, map, multic_linter, name, name1, pos, property, ref, ref1, rule, rules, title, todo, v, value, values;
  map = require('../map/' + source_type);
  factories = {
    error: function(pos, desc, title) {
      return inf.res.errors.push(new LintError(inf, {}, pos, desc, title));
    },
    warn: function(pos, desc, title) {
      return inf.res.warnings.push(new LintWarning(inf, {}, pos, desc, title));
    }
  };
  factories.error["class"] = LintError;
  factories.warn["class"] = LintWarning;
  cfg = {};
  todo = [];
  for (idea in map) {
    rules = map[idea];
    for (rule in rules) {
      ref = rules[rule];
      if (!(ref !== 0)) {
        continue;
      }
      level = levels[idea];
      if (!((idea === 'errors' || idea === 'mandatory_warnings') || (idea === 'enabled_warnings' && ((v = inf.options[rule]) || (v == null))) || (idea === 'disabled_warnings' && inf.options[rule]))) {
        level = 'ignore';
      }
      if (ref === true) {
        if (level !== 'ignore') {
          multic_linter = require('./' + rule);
          title = rule[0].toUpperCase() + rule.substr(1).split('_').join(' ');
          if ((base = ((base1 = inf.ruleTmp)[source_type] != null ? base1[source_type] : base1[source_type] = {})).lines == null) {
            base.lines = inf.source.split('\n');
          }
          multic_linter(inf, source_type, factories[level], title, inf.ruleTmp[source_type].lines);
          if (inf.res.errors.length) {
            return cb(inf.res.errors[0]);
          }
        }
        continue;
      }
      ref1 = (Array.isArray(ref) ? ref : [ref]);
      for (i = 0, len = ref1.length; i < len; i++) {
        item = ref1[i];
        if (typeof item === 'string') {
          name = item;
          keys = null;
          values = [false, true];
        } else {
          name = item.name, property = item.property, values = item.values;
          keys = Array.isArray(property) ? property : [property];
        }
        if (name[0] === '!') {
          name = name.substr(1);
          if (level === 'ignore') {
            level = idea === 'errors' ? 'error' : 'warn';
          } else {
            level = 'ignore';
          }
        }
        if (level === 'ignore') {
          value = values[0];
        } else {
          value = values[1];
          if (-1 < (pos = values.indexOf(inf.options[rule]))) {
            value = values[pos];
          }
        }
        if (source_type === 'coffee') {
          cfg[name] = {
            level: level
          };
          if (keys && value !== true && value !== false) {
            if (keys.length === 2) {
              ((base2 = cfg[name])[name1 = keys[0]] != null ? base2[name1] : base2[name1] = {})[keys[1]] = value;
            } else {
              cfg[name][keys[0]] = value;
            }
          }
        } else {
          cfg[name] = value;
        }
      }
    }
  }
  return next(cfg);
};
