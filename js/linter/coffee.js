// Generated by CoffeeScript 1.9.1
var LintError, LintWarning, linter;

LintError = require('../error/lint-error');

LintWarning = require('../warning/lint-warning');

linter = require('coffeelint').lint;

module.exports = function(inf, cb) {
  var cfg, col, desc, err, i, len, line, msg, parts, pos, ref, ref1, rule, title, warn_level;
  try {
    warn_level = {
      level: 'warn'
    };
    cfg = {
      camel_case_classes: warn_level,
      colon_assignment_spacing: warn_level,
      line_endings: warn_level,
      no_empty_param_list: warn_level,
      no_implicit_braces: warn_level,
      no_plusplus: warn_level,
      no_unnecessary_double_quotes: warn_level,
      prefer_english_operator: warn_level,
      space_operators: warn_level,
      spacing_after_comma: warn_level
    };
    if (inf.maxLength80) {
      cfg.max_line_length = warn_level;
    }
    ref = linter(inf.source, cfg);
    for (i = 0, len = ref.length; i < len; i++) {
      msg = ref[i];
      rule = msg.rule ? '[' + msg.rule + '] ' : '';
      if (typeof msg.message === 'string') {
        if (msg.message.substr(0, 7) === '[stdin]') {
          parts = msg.message.split(' ');
          ref1 = parts[0].substr(8).split(':'), line = ref1[0], col = ref1[1];
          msg.message = parts.slice(1).join(' ');
        }
        msg.message = msg.message.split('\\u001b')[0];
        if (msg.description) {
          desc = rule + msg.description.split('\n<pre>')[0];
          title = msg.message;
        }
      }
      pos = LintError.parsePos(msg.lineNumber || line, col, -1, -1);
      if (msg.level === 'error') {
        if (title == null) {
          title = rule + 'Error';
        }
        inf.res.errors.push(new LintError(inf, msg, pos, desc, title));
      } else {
        if (title == null) {
          title = rule + 'Lint warning';
        }
        inf.res.warnings.push(new LintWarning(inf, msg, pos, desc, title));
      }
    }
  } catch (_error) {
    err = _error;
    inf.res.errors.push(new LintError(inf, err));
  }
  return cb();
};
