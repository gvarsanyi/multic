// Generated by CoffeeScript 1.9.1
var MulticError,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

MulticError = (function(superClass) {
  extend(MulticError, superClass);

  MulticError.prototype.column = null;

  MulticError.prototype.file = null;

  MulticError.prototype.line = null;

  MulticError.prototype.sourceLines = null;

  MulticError.prototype.title = null;

  function MulticError(inf, err, pos, description, title) {
    var column, column_n, from, i, j, len, line, line_literal, line_n, orig_name, ref, ref1, ref2, sourcelines;
    if (Array.isArray(pos)) {
      line = pos[0], column = pos[1];
    } else {
      line = pos;
    }
    if (err && typeof err === 'object') {
      orig_name = err != null ? (ref = err.constructor) != null ? ref.name : void 0 : void 0;
      if (String(orig_name).toLowerCase() === 'error') {
        orig_name = null;
      }
    }
    this.title = title || orig_name || this.constructor.name;
    if (inf.file) {
      this.file = inf.file;
    }
    if (String(line).indexOf('.') === -1 && (!isNaN(line_n = parseInt(line, 10))) && line_n >= 0) {
      this.line = line_n;
      from = Math.max(0, line_n - 5);
      if ((ref1 = (sourcelines = (ref2 = inf.source) != null ? ref2.split('\n').slice(from, +(line_n + 5) + 1 || 9e9) : void 0)) != null ? ref1.length : void 0) {
        for (i = j = 0, len = sourcelines.length; j < len; i = ++j) {
          line_literal = sourcelines[i];
          (this.sourceLines != null ? this.sourceLines : this.sourceLines = {})[from + i] = line_literal;
        }
      }
    }
    if ((column != null) && String(column).indexOf('.') === -1 && (!isNaN(column_n = parseInt(column, 10))) && column_n >= 0) {
      this.column = column_n;
    }
    this.message = description || (err != null ? err.message : void 0) || (err ? String(err) : '');
    MulticError.__super__.constructor.call(this, this.message);
  }

  return MulticError;

})(Error);

module.exports = MulticError;
