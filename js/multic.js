// Generated by CoffeeScript 1.9.1
var fn, opts_factory, source, sources, targets;

sources = {
  coffee: ['js'],
  css: ['min'],
  es6: ['js'],
  html: ['js', 'min'],
  jade: ['html', 'js'],
  js: ['min'],
  sass: ['css']
};

opts_factory = function(source, orig, cb) {
  var k, opts, ref, v;
  if (typeof orig === 'function' && (cb == null)) {
    ref = [orig], cb = ref[0], orig = ref[1];
  }
  if (typeof cb !== 'function') {
    throw new Error('Argument `callback` is a required function');
  }
  if ((orig != null) && typeof orig !== 'object') {
    throw new Error('Argument `options` must be object type');
  }
  opts = {};
  if (orig) {
    for (k in orig) {
      v = orig[k];
      opts[k] = v;
    }
  }
  if (opts.source == null) {
    opts.source = source;
  }
  if (opts.res == null) {
    opts.res = {
      errors: [],
      includes: [],
      warnings: []
    };
  }
  return [opts, cb];
};

fn = function(source, targets) {
  return module.exports[source] = function(compilable) {
    var fn1, i, iface, len, target;
    if (typeof compilable !== 'string') {
      compilable = '';
    }
    iface = {};
    fn1 = function(target) {
      var compile;
      compile = function(opts, cb) {
        var ref;
        ref = opts_factory(compilable, opts, cb), opts = ref[0], cb = ref[1];
        if (target === 'min') {
          return require('./minifier/' + source)(opts, function() {
            if (typeof opts.res.minified !== 'string') {
              opts.res.minified = '';
            }
            return cb(opts.res.errors[0], opts.res);
          });
        } else {
          return require('./compiler/' + source + '-' + target)(opts, function() {
            if (typeof opts.res.compiled !== 'string') {
              opts.res.compiled = '';
            }
            return cb(opts.res.errors[0], opts.res);
          });
        }
      };
      if (target !== 'min') {
        compile.min = function(opts, cb) {
          var ref;
          ref = opts_factory(compilable, opts, cb), opts = ref[0], cb = ref[1];
          opts.res.xxx = 1;
          return compile(opts, function() {
            var minifier;
            if (typeof opts.res.compiled !== 'string') {
              opts.res.compiled = '';
            }
            if (opts.res.errors.length) {
              opts.res.minified = '';
              return cb(opts.res.errors[0], opts.res);
            }
            opts.source = opts.res.compiled;
            minifier = require('./minifier/' + target);
            return minifier(opts, function() {
              if (typeof opts.res.minified !== 'string') {
                opts.res.minified = '';
              }
              return cb(opts.res.errors[0], opts.res);
            });
          });
        };
      }
      return iface[target] = compile;
    };
    for (i = 0, len = targets.length; i < len; i++) {
      target = targets[i];
      fn1(target);
    }
    return iface;
  };
};
for (source in sources) {
  targets = sources[source];
  fn(source, targets);
}

return;
