// Generated by CoffeeScript 1.9.2
var MulticProcess, fs;

MulticProcess = require('./multic-process');

fs = require('fs');

(function() {
  var all_processors, fetch, i, len, list, other_loaded, processor, processor_type, processors, t0;
  all_processors = {
    linter: ['coffee', 'css', 'es6', 'html', 'jade', 'js', 'sass'],
    compiler: ['coffee-js', 'es6-js', 'html-js', 'jade-html', 'jade-js', 'sass-css'],
    minifier: ['css', 'html', 'js']
  };
  list = [];
  for (processor_type in all_processors) {
    processors = all_processors[processor_type];
    for (i = 0, len = processors.length; i < len; i++) {
      processor = processors[i];
      list.push('./' + processor_type + '/' + processor);
    }
  }
  other_loaded = false;
  t0 = (new Date).getTime();
  fs.readdir(__dirname + '/linter/map', function(err, nodes) {
    var j, len1, node, ref;
    ref = nodes || [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      node = ref[j];
      list.push('./linter/map/' + node);
    }
    if (other_loaded) {
      fetch();
    }
    return other_loaded = true;
  });
  fs.readdir(__dirname + '/linter/rule', function(err, nodes) {
    var j, len1, node, ref;
    ref = nodes || [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      node = ref[j];
      list.push('./linter/rule/' + node);
    }
    if (other_loaded) {
      fetch();
    }
    return other_loaded = true;
  });
  return fetch = function() {
    var mod;
    if (mod = list.pop()) {
      require(mod);
      return setTimeout(fetch, 10);
    }
  };
})();

process.on('message', function(msg) {
  var cb, processor;
  cb = function(err, res) {
    return process.send({
      req: 'processed',
      reqId: msg.reqId,
      err: err,
      res: res
    });
  };
  processor = new MulticProcess(msg.source, msg.options);
  processor._worker = true;
  return processor.start(msg.todo, msg.sourceType, msg.targetType, cb, msg.target);
});

process.send({
  req: 'ready'
});
